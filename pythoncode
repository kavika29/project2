from google.colab import drive
drive.mount('/gdrive')
%cd /gdrive

path = "/content/drive/MyDrive/traffic/traffic.csv"

path = "/content/drive/MyDrive/traffic/traffic.csv"
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

df_dataset=pd.read_csv(path)
df.head(5)

df_dataset.info()
convert_dict = {'Junction': float
               }
  
df_dataset= df_dataset.astype(convert_dict)

X=df_dataset.values
y=df_dataset.iloc[38496:48120,0:3].values
print(X.shape,y.shape)

df_train=pd.DataFrame(X, columns = ['DateTime','Junction','Vehicles','ID'])

df_train

df_test=pd.DataFrame(y, columns = ['DateTime','Junction','Vehicles'])

df_test

df_temp= df_train.set_index(['Junction','DateTime'])

level_values = df_temp.index.get_level_values

train = df_train.pivot(index='DateTime',columns='Junction',values='Vehicles')
train

level_values = df_temp.index.get_level_valueslevel_values = df_temp.index.get_level_values

def gen_lag_features(df,n_in=1,n_out=1,dropnan=True):
    n_vars=df.shape[1]
    cols,names=list(),list()
    # input sequence (t-n,...t-1)
    for i in range(n_in,0,-1):
        cols.append(df.shift(i))
        names+=[('Junction %d (H-%d)'%(j+1,i)) for j in range(n_vars)]
    # forecast sequence (t,t+1...t+n)
    for i in range(0,n_out):
        cols.append(df.shift(-i))
        if i== 0:
            names+=[('Junction %d (H)' % (j+1)) for j in range(n_vars)]
        else:
            names+=[('Junction %d (H+%d)' % (j+1,i)) for j in range(n_vars)]
    # put it all together
    agg = pd.concat(cols,axis=1)
    agg.columns=names
    # drop rows with Nan values
    if dropnan:
        agg.dropna(inplace=True)
    return agg
    
    Xy_train=gen_lag_features(train)
Xy_train

from sklearn.preprocessing import MinMaxScaler, StandardScaler
scaler= MinMaxScaler(feature_range=(0,1))
Xy_train[Xy_train.columns] = scaler.fit_transform(Xy_train[Xy_train.columns])

Xy_train

X_train = Xy_train[Xy_train.index< '2017-04-01'].iloc[:,0:4]
X_train

y_train = Xy_train[Xy_train.index< '2017-04-01'].iloc[:,4:]
y_train

print(X_train.shape,y_train.shape)

X_train = np.expand_dims(X_train.values,axis=2)
print(X_train.shape)

y_train=y_train.values
print(y_train.shape)

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.initializers import he_normal
import keras.backend as K

def root_mean_squared_error(y_true,y_pred):
    return K.sqrt(K.mean(K.square(y_pred-y_true),axis=-1))
    
    regressor = Sequential()

#Adding the input layer and the LSTM layer
regressor.add(LSTM(units=50,activation='relu',kernel_initializer= he_normal(seed=0),input_shape=(None,1)))

#output for 4 junctions
regressor.add(Dense(units =4))

#compiling the RNN
regressor.compile(optimizer='adam',loss=root_mean_squared_error)

regressor.fit(X_train,y_train,batch_size=128,epochs=100,verbose=1)

X_valid=Xy_train[Xy_train.index >='2017-04-01'].iloc[:,0:4]
X_valid

X_valid = np.expand_dims(X_valid.values,axis=2)
y_pred = regressor.predict(X_valid)

y_pred=scaler.inverse_transform(np.concatenate((X_valid.squeeze(),y_pred),axis=1))[:,4:]
y_pred

y_truth = train[train.index>='2017-04-01']
y_truth

for junction in range(4):
    plt.figure
    plt.plot(y_truth.values[:,junction],color ='skyblue',label='Real traffic')
    plt.plot(y_pred[:,junction],color='green', label='Predicted traffic')
    plt.title('Traffic Forecasting at junction %i'%(junction+1))
    plt.xlabel('Number of hours from Start')
    plt.ylabel('Traffic')
    plt.legend()
    plt.show()
    
    
